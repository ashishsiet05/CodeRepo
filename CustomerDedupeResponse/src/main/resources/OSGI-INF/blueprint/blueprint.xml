<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
    xmlns:cxf="http://camel.apache.org/schema/blueprint/cxf"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd          http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd          http://camel.apache.org/schema/blueprint/cxf  http://camel.apache.org/schema/blueprint/cxf/camel-cxf.xsd">
    <cm:property-placeholder persistent-id="CCAConnection" update-strategy="reload"/>
    <cxf:rsServer address="${ReceiveLOSDedupeRespone}"
        id="DedupeRestEndpoint" serviceClass="com.magma.DedupeResponse.CustomerDedupeResponseRestService"/>
    <bean class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close" id="CCAUATDBConnection">
        <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
        <property name="url" value="${CCAJDBCURL}"/>
        <property name="username" value="${Username}"/>
        <property name="password" value="${Password}"/>
        <property name="validationQuery" value="select 1 from dual"/>
        <property name="testOnBorrow" value="true"/>
    </bean>
    <!-- configure the Camel SQL component to use the JDBC data source -->
    <bean class="org.apache.camel.component.sql.SqlComponent" id="sql">
        <property name="dataSource" ref="CCAUATDBConnection"/>
    </bean>
    <!-- Bean Declarations -->
    <bean class="com.magma.DedupeResponse.ErrorAcknowledger" id="ErrorAckProcessor"/>
    <bean class="com.magma.DedupeResponse.EnrichJSON" id="EnrichJson"/>
    <bean class="com.magma.DedupeResponse.ConvertDbDate" id="epochtoDate"/>
    <bean class="com.magma.DedupeResponse.ArrayConversion" id="ArrayConvert"/>
    <bean class="com.magma.DedupeResponse.RestProcessor" id="restprocessor"/>
    <camelContext id="DedupeResponse" useMDCLogging="true" xmlns="http://camel.apache.org/schema/blueprint">
        <dataFormats>
            <xmljson arrayName="Data" elementName="Data"
                expandableProperties="Response Data"
                forceTopLevelObject="true" id="CCADetailsResponse"
                rootName="Response" skipNamespaces="true" trimSpaces="true"/>
            <xmljson arrayName="Data" elementName="Data"
                expandableProperties="Data General Result CustMtchDtls FinancialDedupe Error"
                forceTopLevelObject="false" id="LosResponse"
                rootName="DedupeResponse" skipNamespaces="true" trimSpaces="true"/>
        </dataFormats>
        <route autoStartup="true" id="DedupeResponseRoute" startupOrder="1">
            <from id="ReceiveDeDupeRequest" uri="cxfrs:bean:DedupeRestEndpoint"/>
            <!--  <from id="ReceiveDeDupeRequest" uri="restlet:http://172.17.7.159:9902/rest/CCA/dedupe/dedupeResponse?restletMethod=POST"/> -->
            <setHeader headerName="requestType" id="Request">
                <simple>Source Request</simple>
            </setHeader>
            <setProperty id="Propertyesbtxnid" propertyName="esbtxnid">
                <simple>${header.esb-txnid}</simple>
            </setProperty>
            <setProperty id="Propertyesbsource" propertyName="esbsource">
                <simple>${header.esb-source}</simple>
            </setProperty>
            <setHeader headerName="esbtxnid" id="_setHeader1">
                <simple>${header.esb-txnid}</simple>
            </setHeader>
            <to id="_to1" pattern="InOnly" uri="seda:dedupresponse"/>
            <to id="validateheader" uri="direct-vm:processHeader"/>
            <choice id="headerProcessing">
                <when id="Missingheader">
                    <simple>${header.Error} == 'MissingHeader'</simple>
                </when>
                <otherwise id="SuccessPath">
                    <convertBodyTo id="_convertBodyTo1" type="java.lang.String"/>
                    <setHeader headerName="RefRequestId" id="setProposalNumber">
                        <jsonpath>$.RefReqstId</jsonpath>
                    </setHeader>
                    <setHeader headerName="LeadNum" id="setLeadNum">
                        <jsonpath>$.LeadNum</jsonpath>
                    </setHeader>
                    <to id="SqlSelect" uri="sql:{{CCASelect}}"/>
                    <choice id="_choice1">
                        <when id="_when2">
                            <simple>${body} == '[]'</simple>
                            <setBody id="_setBody1">
                                <simple>{"txnid":"${header.esb-txnid}","status":"No Result found for reference Id ${header.RefRequestId}"}</simple>
                            </setBody>
                            <choice id="_choice2">
                                <when id="_when3">
                                    <simple>${exchangeProperty.esbsource} == 'HFC-LOS'</simple>
                                    <process id="Statuscode" ref="restprocessor"/>
                                </when>
                            </choice>
                            <setHeader headerName="Content-Type" id="_setHeader1">
                                <simple>application/json</simple>
                            </setHeader>
                            <setHeader headerName="status1" id="succses">
                                <simple>success</simple>
                            </setHeader>
                            <to id="dedupresponseresponseLog" pattern="InOnly" uri="seda:dedupresponse"/>
                        </when>
                        <otherwise id="Successotherwise">
                            <marshal id="marshalDBResponse">
                                <json library="Jackson" prettyPrint="true"/>
                            </marshal>
                            <setProperty id="setHdrResponse" propertyName="HdrResponse">
                                <simple>${body}</simple>
                            </setProperty>
                            <setHeader headerName="ResultStatus" id="setResultStatus">
                                <jsonpath resultType="java.lang.String">$.[0].REQUEST_STATUS</jsonpath>
                            </setHeader>
                            <setHeader headerName="isMatched" id="setIsMatched">
                                <jsonpath resultType="java.lang.String">$.[0].IS_MATCHED</jsonpath>
                            </setHeader>
                            <setHeader headerName="InternalDedupe" id="setInternalDedupe">
                                <jsonpath resultType="java.lang.String">$.[0].INTERNAL_DEDUPE</jsonpath>
                            </setHeader>
                            <setHeader headerName="HdrUCIC" id="setHdrUCIC">
                                <jsonpath resultType="java.lang.String">$.[0].UCIC_VALUE</jsonpath>
                            </setHeader>
                            <choice id="checkResultStatus">
                                <when id="SuccessStatus">
                                    <simple>${in.header.ResultStatus} == 'C' and ${in.header.isMatched} == 'MATCHED'</simple>
                                    <to id="selectCCADetails" uri="sql:{{CCASelectDetails}}"/>
                                    <process id="_bean1" ref="epochtoDate"/>
                                    <marshal id="marshalDTLSResp">
                                    <json library="Jackson" prettyPrint="true"/>
                                    </marshal>
                                    <unmarshal id="UnmarshalDBRespToXML" ref="CCADetailsResponse"/>
                                    <to id="TransformDtlsResponse" uri="xslt:./XSLT/CCADtlsResponse.xsl"/>
                                    <marshal id="MarshalLOSDtlsReponse" ref="LosResponse"/>
                                    <unmarshal id="_unmarshal1">
                                    <json library="Jackson"/>
                                    </unmarshal>
                                    <process id="ConvertArray" ref="ArrayConvert"/>
                                    <marshal id="ConverJson">
                                    <json library="Jackson" prettyPrint="true"/>
                                    </marshal>
                                    <convertBodyTo
                                    id="COnvertStringResponse" type="java.lang.String"/>
                                    <process id="enrichHeaderJson" ref="EnrichJson"/>
                                    <setHeader headerName="status1" id="succses">
                                    <simple>success</simple>
                                    </setHeader>
                                    <setHeader headerName="requestType" id="Targetreq">
                                    <simple>Source Response</simple>
                                    </setHeader>
                                    <to id="ResponseLog" pattern="InOnly" uri="seda:dedupresponse"/>
                                </when>
                                <when id="CheckResultStatus">
                                    <simple>${in.header.ResultStatus} == 'C' and ${in.header.isMatched} == 'NOMATCHED'</simple>
                                    <unmarshal id="UnmarshalDBRespToXML" ref="CCADetailsResponse"/>
                                    <to id="TransformDtlsResponse" uri="xslt:./XSLT/CCAHdrResponse.xsl"/>
                                    <marshal id="MarshalLOSHdrReponse" ref="LosResponse"/>
                                    <unmarshal id="_unmarshal1">
                                    <json library="Jackson"/>
                                    </unmarshal>
                                    <process id="ConvertArray" ref="ArrayConvert"/>
                                    <marshal id="_marshal1">
                                    <json library="Jackson" prettyPrint="true"/>
                                    </marshal>
                                    <process id="enrichDetailJson" ref="EnrichJson"/>
                                    <setHeader headerName="status1" id="succses">
                                    <simple>success</simple>
                                    </setHeader>
                                    <setHeader headerName="requestType" id="Targetreq">
                                    <simple>Source Response</simple>
                                    </setHeader>
                                    <to id="ResponseLog2" pattern="InOnly" uri="seda:dedupresponse"/>
                                </when>
                                <otherwise id="_otherwise1">
                                    <setBody id="_setBody1">
                                    <simple>{"txnid":"${header.esbtxnid}","status":"Dedupe Result is pending"}</simple>
                                    </setBody>
                                    <setHeader headerName="status1" id="succses">
                                    <simple>success</simple>
                                    </setHeader>
                                    <setHeader headerName="requestType" id="Targetreq">
                                    <simple>Source Response</simple>
                                    </setHeader>
                                    <to id="ResponseLog3" pattern="InOnly" uri="seda:dedupresponse"/>
                                </otherwise>
                            </choice>
                        </otherwise>
                    </choice>
                </otherwise>
            </choice>
            <onException id="HandleException" useOriginalMessage="true">
                <exception>java.lang.Exception</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <setProperty id="_setProperty1" propertyName="ErrorOccured">
                    <constant>yes</constant>
                </setProperty>
                <setProperty id="setExpMsg" propertyName="ExpMsg">
                    <simple>${exception.message}</simple>
                </setProperty>
                <process id="processErrorResp" ref="ErrorAckProcessor"/>
                <marshal id="MarshalErrorResponse">
                    <json library="Jackson" prettyPrint="true"/>
                </marshal>
                <convertBodyTo id="ErrorReponse" type="java.lang.String"/>
                <setHeader headerName="requestType" id="Targetreq">
                    <simple>Source Response</simple>
                </setHeader>
                <setHeader headerName="status1" id="succses">
                    <simple>error</simple>
                </setHeader>
                <to id="exceptionLog" pattern="InOnly" uri="seda:dedupresponse"/>
            </onException>
        </route>
        <route id="dedupresponseLog">
            <from id="Logging" uri="seda:dedupresponse"/>
            <setBody id="LogBody">
                <simple>{"txnid":"${exchangeProperty.esbtxnid}","source":"${exchangeProperty.esbsource}","timestamp":"${date:now:dd-yyyy-MM HH-mm-ss}","Type":"${header.requestType}","Payload":${body},"status":"${header.status1}"}</simple>
            </setBody>
            <log id="dedupresponseBody" message="${body}"/>
        </route>
    </camelContext>
</blueprint>
